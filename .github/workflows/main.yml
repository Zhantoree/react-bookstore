name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        run: |
          git clone \
            https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git \
            $GITHUB_WORKSPACE
          cd $GITHUB_WORKSPACE

      - name: Install nvm & Node.js v22
        run: |
          export NVM_DIR="$RUNNER_TEMP/.nvm"
          mkdir -p "$NVM_DIR"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          source "$NVM_DIR/nvm.sh"
          nvm install 22
          nvm use 22
          node -v && npm -v

      - name: Install dependencies
        run: |
          cd $GITHUB_WORKSPACE
          npm ci

      - name: Run tests (if present)
        run: |
          cd $GITHUB_WORKSPACE
          npm test --if-present

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login ${{ secrets.DOCKER_REGISTRY }} \
                --username ${{ secrets.DOCKER_USERNAME }} \
                --password-stdin

      - name: Build & push Docker image
        run: |
          cd $GITHUB_WORKSPACE
          IMAGE="${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/frontend"
          docker build -t "$IMAGE:latest" .
          docker tag "$IMAGE:latest" "$IMAGE:${{ github.sha }}"
          docker push "$IMAGE:latest"
          docker push "$IMAGE:${{ github.sha }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Setup SSH key and agent
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SWARM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # convert key to PEM for compatibility
          ssh-keygen -p -N "" -m PEM -f ~/.ssh/id_rsa

          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Deploy to Docker Swarm
        run: |
          ssh -o StrictHostKeyChecking=no \
              -p ${{ secrets.SWARM_SSH_PORT }} \
              ${{ secrets.SWARM_USER }}@${{ secrets.SWARM_HOST }} << 'EOF'
            echo "${{ secrets.DOCKER_PASSWORD }}" \
              | docker login ${{ secrets.DOCKER_REGISTRY }} \
                  --username ${{ secrets.DOCKER_USERNAME }} \
                  --password-stdin

            docker stack deploy \
              -c /home/${{ secrets.SWARM_USER }}/docker-compose.yml \
              frontend-stack \
              --with-registry-auth
          EOF
