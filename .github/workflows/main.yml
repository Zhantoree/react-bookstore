name: CI & Docker Swarm Deploy

on:
  push:
    branches: [ main ]

env:
  IMAGE_BASE: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git \
            "$GITHUB_WORKSPACE"
          cd "$GITHUB_WORKSPACE"

      - name: Install nvm & Node.js v22
        run: |
          export NVM_DIR="$RUNNER_TEMP/.nvm"
          mkdir -p "$NVM_DIR"
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          source "$NVM_DIR/nvm.sh"
          nvm install 22
          nvm use 22

      - name: Install dependencies
        run: |
          cd "$GITHUB_WORKSPACE"
          npm ci

      - name: Run tests if present
        run: |
          cd "$GITHUB_WORKSPACE"
          npm test --if-present

      - name: Docker login, build & push
        run: |
          IMAGE="${{ env.IMAGE_BASE }}:${{ github.sha }}"
          echo "${{ secrets.DOCKER_PASSWORD }}" \
            | docker login ${{ secrets.DOCKER_REGISTRY }} \
              --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          sed -i 's/\r$//' ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy to Swarm
        run: |
          # compute port & image locally
          PORT="${{ secrets.SSH_PORT }}"; PORT="${PORT:-22}"
          IMAGE="${{ env.IMAGE_BASE }}:${{ github.sha }}"

          # add host fingerprint
          ssh-keyscan -p "$PORT" ${{ secrets.SWARM_HOST }} >> ~/.ssh/known_hosts

          ssh -i ~/.ssh/id_rsa -p "$PORT" \
            ${{ secrets.SWARM_USER }}@${{ secrets.SWARM_HOST }} <<EOF
            set -euo pipefail

            # login on remote
            echo "${{ secrets.DOCKER_PASSWORD }}" \
              | docker login ${{ secrets.DOCKER_REGISTRY }} \
                --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # pull & update or deploy
            docker pull $IMAGE

            if docker service inspect frontend_app >/dev/null 2>&1; then
              docker service update --image $IMAGE frontend_app
            else
              docker stack deploy -c docker-compose.yml frontend
            fi
          EOF
